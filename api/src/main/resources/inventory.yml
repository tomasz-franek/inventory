openapi: "3.0.0"
info:
  title: Inventory App
  description: This is a REST API for Inventory application.
  version: 1.0.0
servers:
  - url: http://localhost:8080/
paths:
  /inventories:
    get:
      summary: get all inventories
      operationId: getAllInventories
      tags:
        - inventories
      responses:
        '200':
          description: All Inventories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Inventory'
    post:
      summary: save Inventory
      operationId: saveInventory
      tags:
        - inventories
      requestBody:
        description: new Inventory object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Inventory'
      responses:
        '201':
          description: saved Inventory
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseId'
  /inventories/{inventoryId}:
    get:
      operationId: getInventory
      summary: Get Inventory object
      tags:
        - inventories
      parameters:
        - name: inventoryId
          in: path
          required: true
          description: The ID of the Inventory to get
          schema:
            type: integer
            format: int64
      responses:
        '404':
          description: Inventory not found
        '200':
          description: Inventory object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inventory'
    patch:
      operationId: updateInventory
      summary: Update Inventory object
      tags:
        - inventories
      parameters:
        - name: inventoryId
          in: path
          required: true
          description: The ID of the Inventory to update
          schema:
            type: integer
            format: int64
      requestBody:
        description: Inventory object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Inventory'
      responses:
        '204':
          description: Inventory updated
        '400':
          description: Unable to update Inventory
          content:
            application/json:
              schema:
                type: string
    delete:
      operationId: deleteInventory
      summary: Delete Inventory
      tags:
        - inventories
      parameters:
        - name: inventoryId
          in: path
          required: true
          description: The ID of the Inventory to delete
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Inventory deleted
        '404':
          description: Inventory not found
  /products:
    get:
      summary: get all products
      operationId: getAllProducts
      tags:
        - products
      responses:
        '200':
          description: All Products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      summary: save product
      operationId: saveProduct
      tags:
        - products
      requestBody:
        description: new product object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201':
          description: saved product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseId'
  /products/{productId}:
    get:
      operationId: getProduct
      summary: Get Product object
      tags:
        - products
      parameters:
        - name: productId
          in: path
          required: true
          description: The ID of the Product to get
          schema:
            type: integer
            format: int64
      responses:
        '404':
          description: Product not found
        '200':
          description: Product object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    patch:
      operationId: updateProduct
      summary: Update Product object
      tags:
        - products
      parameters:
        - name: productId
          in: path
          required: true
          description: The ID of the Product to update
          schema:
            type: integer
            format: int64
      requestBody:
        description: Product object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '204':
          description: Product updated
        '400':
          description: Unable to update Product
          content:
            application/json:
              schema:
                type: string
    delete:
      operationId: deleteProduct
      summary: Delete Product
      tags:
        - products
      parameters:
        - name: productId
          in: path
          required: true
          description: The ID of the Product to delete
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Product deleted
        '404':
          description: Product not found
  /categories:
    get:
      summary: get all categories
      operationId: getAllCategories
      tags:
        - categories
      responses:
        '200':
          description: All Categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
    post:
      summary: save category
      operationId: saveCategory
      tags:
        - categories
      requestBody:
        description: new category object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '201':
          description: saved category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseId'
  /categories/{categoryId}:
    get:
      operationId: getCategory
      summary: Get Category object
      tags:
        - categories
      parameters:
        - name: categoryId
          in: path
          required: true
          description: The ID of the Category to get
          schema:
            type: integer
            format: int64
      responses:
        '404':
          description: Category not found
        '200':
          description: Category object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
    patch:
      operationId: updateCategory
      summary: Update Category object
      tags:
        - categories
      parameters:
        - name: categoryId
          in: path
          required: true
          description: The ID of the Category to update
          schema:
            type: integer
            format: int64
      requestBody:
        description: Category object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
      responses:
        '204':
          description: Category updated
        '400':
          description: Unable to update Category
          content:
            application/json:
              schema:
                type: string
    delete:
      operationId: deleteCategory
      summary: Delete Category
      tags:
        - categories
      parameters:
        - name: categoryId
          in: path
          required: true
          description: The ID of the Category to delete
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Category deleted
        '404':
          description: Category not found
  /units:
    get:
      summary: get all units
      operationId: getAllUnits
      tags:
        - units
      responses:
        '200':
          description: All units
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Unit'
  /units/defaults:
    get:
      summary: get all units defaults
      operationId: getAllUnitDefaults
      tags:
        - units
      responses:
        '200':
          description: All units defaults
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UnitDefault'
  /units/{unitId}:
    get:
      operationId: getUnit
      summary: Get Unit object
      tags:
        - units
      parameters:
        - name: unitId
          in: path
          required: true
          description: The ID of the Unit to get
          schema:
            type: integer
            format: int64
      responses:
        '404':
          description: Unit not found
        '200':
          description: Unit object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
  /storages:
    get:
      summary: get all storages
      operationId: getAllStorages
      tags:
        - storages
      responses:
        '200':
          description: All storages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Storage'
    post:
      summary: save Storage
      operationId: saveStorage
      tags:
        - storages
      requestBody:
        description: new Storage object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Storage'
      responses:
        '201':
          description: saved Storage
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseId'
  /storages/{storageId}:
    get:
      operationId: getStorage
      summary: Get Storage object
      tags:
        - storages
      parameters:
        - name: storageId
          in: path
          required: true
          description: The ID of the Storage to get
          schema:
            type: integer
            format: int64
      responses:
        '404':
          description: Storage not found
        '200':
          description: Storage object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Storage'
    patch:
      operationId: updateStorage
      summary: Update Storage object
      tags:
        - storages
      parameters:
        - name: storageId
          in: path
          required: true
          description: The ID of the Storage to update
          schema:
            type: integer
            format: int64
      requestBody:
        description: Storage object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Storage'
      responses:
        '204':
          description: Storage updated
        '400':
          description: Unable to update Storage
          content:
            application/json:
              schema:
                type: string
  /shopping:
    get:
      summary: get all shopping's
      operationId: getAllShopping
      tags:
        - shopping
      responses:
        '200':
          description: All shopping's
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Shopping'
    post:
      summary: save Shopping
      operationId: saveShopping
      tags:
        - shopping
      requestBody:
        description: new Shopping object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Shopping'
      responses:
        '201':
          description: saved Shopping
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseId'
  /shopping/{shoppingId}:
    get:
      operationId: getShopping
      summary: Get Shopping object
      tags:
        - shopping
      parameters:
        - name: shoppingId
          in: path
          required: true
          description: The ID of the Shopping to get
          schema:
            type: integer
            format: int64
      responses:
        '404':
          description: Shopping not found
        '200':
          description: Shopping object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shopping'
    patch:
      operationId: updateShopping
      summary: Update Shopping object
      tags:
        - shopping
      parameters:
        - name: shoppingId
          in: path
          required: true
          description: The ID of the Shopping to update
          schema:
            type: integer
            format: int64
      requestBody:
        description: Shopping object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Shopping'
      responses:
        '204':
          description: Shopping updated
        '400':
          description: Unable to update Shopping
          content:
            application/json:
              schema:
                type: string
    delete:
      operationId: deleteShopping
      summary: Delete Shopping
      tags:
        - shopping
      parameters:
        - name: shoppingId
          in: path
          required: true
          description: The ID of the Shopping to delete
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Shopping deleted
        '404':
          description: Shopping not found

  /properties/{userId}:
    get:
      operationId: getProperty
      summary: Get Property object
      tags:
        - property
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the User to get
          schema:
            type: integer
            format: int64
      responses:
        '404':
          description: Property not found
        '200':
          description: Property object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Property'
    patch:
      operationId: updateProperty
      summary: Update Property object
      tags:
        - property
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the Property to update
          schema:
            type: integer
            format: int64
      requestBody:
        description: Property object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Property'
      responses:
        '204':
          description: Property updated
        '400':
          description: Unable to update Property
          content:
            application/json:
              schema:
                type: string
  /items:
    get:
      summary: get all Inventory Items
      operationId: getAllItems
      tags:
        - items
      responses:
        '200':
          description: All items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
    post:
      summary: save Item
      operationId: saveItem
      tags:
        - items
      requestBody:
        description: new Item object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '201':
          description: saved Item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseId'
  /items/{itemId}:
    get:
      operationId: getItem
      summary: Get Item object
      tags:
        - items
      parameters:
        - name: itemId
          in: path
          required: true
          description: The ID of the Item to get
          schema:
            type: integer
            format: int64
      responses:
        '404':
          description: Item not found
        '200':
          description: Item object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
    patch:
      summary: update Item
      operationId: updateItem
      tags:
        - items
      parameters:
        - name: itemId
          in: path
          required: true
          description: The ID of the Item to update
          schema:
            type: integer
            format: int64
      requestBody:
        description: modified Item object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '201':
          description: updated Item
  /items/update/{idItem}/inventory/{idInventory}:
    patch:
      summary: update Item with InventoryId
      operationId: updateItemByInventoryId
      tags:
        - items
      parameters:
        - name: idItem
          in: path
          required: true
          description: The ID of the Item to update
          schema:
            type: integer
            format: int64
        - name: idInventory
          in: path
          required: true
          description: The ID of the Inventory
          schema:
            type: integer
            format: int64
      responses:
        '201':
          description: updated Item
  /dictionary/itemsWithoutInventory:
    get:
      summary: read Items not assigned to any Inventory
      operationId: itemsWithoutInventory
      tags:
        - dictionary
      responses:
        '200':
          description: list of Items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
  /dictionary/consumeProducts/{idInventory}/{idCategory}:
    get:
      summary: read Products ready to be consumed
      operationId: getConsumeProductListInventoryCategory
      tags:
        - dictionary
      parameters:
        - name: idInventory
          in: path
          required: true
          description: The ID of the Inventory
          schema:
            type: integer
            format: int64
        - name: idCategory
          in: path
          required: true
          description: The ID of the Category
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: list of Items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConsumeProduct'
  /dictionary/consumeProducts/{idInventory}/{idCategory}/{idProduct}:
    get:
      summary: read Products ready to be consumed
      operationId: getConsumeProductListInventoryCategoryProduct
      tags:
        - dictionary
      parameters:
        - name: idInventory
          in: path
          required: true
          description: The ID of the Inventory
          schema:
            type: integer
            format: int64
        - name: idCategory
          in: path
          required: true
          description: The ID of the Category
          schema:
            type: integer
            format: int64
        - name: idProduct
          in: path
          required: true
          description: The ID of the Product
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: list of Items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ConsumeProduct'
  /report/inventory/{idInventory}:
    get:
      summary: get Inventory report
      operationId: getInventoryReportData
      tags:
        - report
      parameters:
        - name: idInventory
          in: path
          required: true
          description: The ID of the Inventory
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: list of InventoryReportData
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/InventoryReportData'
  /report/inventory:
    get:
      summary: get Inventory report for all inventories
      operationId: getValidInventoryReport
      tags:
        - report
      responses:
        '200':
          description: list of ValidInventory objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StorageReportDataRow'
  /report/expired/{idInventory}:
    get:
      summary: get expired Products from Inventory
      operationId: getExpiredInventoryReportData
      tags:
        - report
      parameters:
        - name: idInventory
          in: path
          required: true
          description: The ID of the Inventory
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: list of InventoryReportData
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExpiredReportData'
  /report/expired:
    get:
      summary: get expired Products from all Inventories
      operationId: getExpiredReportData
      tags:
        - report
      responses:
        '200':
          description: list of InventoryReportData
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ExpiredReportData'
  /report/lastUsed/{idInventory}:
    get:
      summary: get last used Products from Inventory
      operationId: getLastUsedInventoryReportData
      tags:
        - report
      parameters:
        - name: idInventory
          in: path
          required: true
          description: The ID of the Inventory
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: list of Last used Products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LastUsedData'
  /report/storagePrediction:
    get:
      summary: get prediction for products
      operationId: getStoragePrediction
      tags:
        - report
      responses:
        '200':
          description: list of Last used Products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductPredictionData'
  /report/availability/{idProduct}/{period}:
    get:
      summary: get prediction for products
      operationId: getProductAvailabilityForPeriod
      tags:
        - report
      parameters:
        - name: idProduct
          in: path
          required: true
          description: The ID of the Product
          schema:
            type: integer
            format: int64
        - name: period
          in: path
          required: true
          description: Period in Days
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: list of Availability data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductAvailabilityData'
  /report/nextDaysExpired/{days}:
    get:
      summary: get list of the Products that expired in the next number of Days
      operationId: getNextDaysExpired
      tags:
        - report
      parameters:
        - name: days
          in: path
          required: true
          description: number of the Days
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: list of the Products expired in the next days
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NextDayExpiredData'
  /report/storageValueHistory/{days}/{idInventory}:
    get:
      summary: Historical value of the Products stored in the Inventory
      operationId: getStorageValueHistoryForInventory
      tags:
        - report
      parameters:
        - name: days
          in: path
          required: true
          description: number of the Days
          schema:
            type: integer
            format: int32
        - name: idInventory
          in: path
          required: true
          description: The ID of the Inventory
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: list of value operations in Inventory
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StorageValueHistoryData'
  /report/storageValueHistory/{days}:
    get:
      summary: Historical value of the Products stored in the Inventory
      operationId: getStorageValueHistory
      tags:
        - report
      parameters:
        - name: days
          in: path
          required: true
          description: number of the Days
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: list of historical Product prices
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StorageValueHistoryData'
  /report/priceHistory/{idProduct}:
    get:
      summary: Historical price of the Product
      operationId: getProductPriceHistory
      tags:
        - report
      parameters:
        - name: idProduct
          in: path
          required: true
          description: The ID of the Product
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: list of value operations in Inventory
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductPriceHistoryData'
  /report/sumPricesByCategory:
    get:
      summary: get sum of all Product grouped by Category
      operationId: getSumPricesByCategory
      tags:
        - report
      responses:
        '200':
          description: list of sum of the Products in Categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PriceCategoryData'
  /report/listPurchases/{days}/{idInventory}:
    get:
      summary: get Products bought in the last days
      operationId: getListRecentPurchases
      tags:
        - report
      parameters:
        - name: days
          in: path
          required: true
          description: number of the Days
          schema:
            type: integer
            format: int32
        - name: idInventory
          in: path
          required: true
          description: The ID of the Inventory
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: list of last bought Products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PurchasesData'
components:
  schemas:
    Inventory:
      type: object
      required:
        - name
        - optLock
        - active
      properties:
        idInventory:
          type: integer
          format: int64
        name:
          type: string
          maxLength: 45
        description:
          type: string
          maxLength: 200
        active:
          type: boolean
        optLock:
          type: integer
          format: int32

    Product:
      type: object
      required:
        - name
        - idCategory
        - optLock
        - active
        - fragile
      properties:
        idProduct:
          type: integer
          format: int64
        name:
          type: string
          maxLength: 45
        active:
          type: boolean
        fragile:
          type: boolean
        idCategory:
          type: integer
          format: int64
        limitMin:
          type: integer
          format: int32
        limitMed:
          type: integer
          format: int32
        limitMax:
          type: integer
          format: int32
        optLock:
          type: integer
          format: int32

    Category:
      type: object
      required:
        - name
        - active
        - optLock
      properties:
        idCategory:
          type: integer
          format: int64
        name:
          type: string
          maxLength: 100
        active:
          type: boolean
        optLock:
          type: integer
          format: int32

    Unit:
      type: object
      required:
        - name
        - symbol
        - optLock
      properties:
        idUnit:
          type: integer
          format: int64
        name:
          type: string
          maxLength: 100
        symbol:
          type: string
          maxLength: 5
        rounding:
          type: integer
          format: int32
        optLock:
          type: integer
          format: int32

    Storage:
      type: object
      required:
        - idProduct
        - items
        - insertDate
        - price
        - used
        - optLock
      properties:
        idStorage:
          type: integer
          format: int64
        idProduct:
          type: integer
          format: int64
        idCategory:
          type: integer
          format: int64
        items:
          type: integer
          format: int32
        insertDate:
          type: string
          format: date
        validDate:
          type: string
          format: date
        idUnit:
          type: integer
          format: int64
        count:
          type: number
        used:
          type: number
          description: Percent of used product between 0% and 100%
          minimum: 0
          maximum: 100
        endDate:
          type: string
          format: date
        price:
          type: number
        optLock:
          type: integer
          format: int32
        idInventory:
          type: integer
          format: int64

    Item:
      type: object
      required:
        - idStorage
        - insertDate
        - optLock
      properties:
        idItem:
          type: integer
          format: int64
        name:
          type: string
          maxLength: 100
        idStorage:
          type: integer
          format: int64
        idInventory:
          type: integer
          format: int64
        insertDate:
          type: string
          format: date
        validDate:
          type: string
          format: date
        used:
          type: number
        endDate:
          type: string
          format: date
        optLock:
          type: integer
          format: int32
        ids:
          type: array
          items:
            type: number

    UnitDefault:
      type: object
      required:
        - idProduct
        - optLock
      properties:
        idUnitDefault:
          type: integer
          format: int64
        idProduct:
          type: integer
          format: int64
        idUnit:
          type: integer
          format: int64
        count:
          type: number
        optLock:
          type: integer
          format: int32

    Shopping:
      type: object
      required:
        - name
        - items
        - optLock
      properties:
        idShopping:
          type: integer
          format: int64
        idUnit:
          type: integer
          format: int64
        idProduct:
          type: integer
          format: int64
        name:
          type: string
          maxLength: 45
        count:
          type: number
        items:
          type: number
        optLock:
          type: integer
          format: int32
        price:
          $ref: '#/components/schemas/Price'

    Price:
      type: object
      properties:
        useBeforeDate:
          type: string
          format: date
        minPrice:
          type: number
        maxPrice:
          type: number
        averagePrice:
          type: number
        lastPrice:
          type: number
    ResponseId:
      type: object
      required:
        - id
      properties:
        id:
          type: integer
          format: int64

    Property:
      type: object
      required:
        - idUser
        - idProperty
      properties:
        idProperty:
          type: integer
          format: int64
        idUser:
          type: integer
          format: int64
        currency:
          type: string
          maxLength: 3
        language:
          type: string
          maxLength: 2

    InventoryReportData:
      type: object
      properties:
        idProduct:
          type: integer
          format: int64
        items:
          type: integer
          format: int32
        productName:
          type: string
        validDate:
          type: string
          format: date

    ConsumeProduct:
      type: object
      required:
        - idProduct
        - productName
        - inventoryName
        - used
        - insertDate
      properties:
        idItem:
          type: integer
          format: int64
        idProduct:
          type: integer
          format: int64
        validDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        insertDate:
          type: string
          format: date
        productName:
          type: string
        inventoryName:
          type: string
        used:
          type: number
        price:
          type: number

    ExpiredReportData:
      type: object
      properties:
        idProduct:
          type: integer
          format: int64
        productName:
          type: string
        validDate:
          type: string
          format: date
        items:
          type: integer
          format: int32
        validList:
          type: array
          items:
            $ref: '#/components/schemas/ValidExpiredData'
    ValidExpiredData:
      type: object
      properties:
        validDate:
          type: string
          format: date
        count:
          type: integer
          format: int32
    LastUsedData:
      type: object
      properties:
        endDate:
          type: string
          format: date
        idProduct:
          type: integer
          format: int64
        productName:
          type: string
    ProductPredictionData:
      type: object
      properties:
        idProduct:
          type: integer
          format: int64
        productName:
          type: string
        minimalProductBuyingDate:
          type: string
          format: date
        countUsed:
          type: number
        countItems:
          type: number
        available:
          type: number
        predictedAvailabilityDate:
          type: string
          format: date
        limitMax:
          type: integer
          format: int32
        limitMed:
          type: integer
          format: int32
        limitMin:
          type: integer
          format: int32
    ProductAvailabilityData:
      type: object
      required:
        - availabilityDate
      properties:
        availabilityDate:
          type: string
          format: date
        count:
          type: integer
          format: int32
        productName:
          type: string

    NextDayExpiredData:
      type: object
      required:
        - idProduct
        - productName
        - inventoryName
        - used
      properties:
        idProduct:
          type: integer
          format: int64
        productName:
          type: string
        inventoryName:
          type: string
          maxLength: 45
        validDate:
          type: string
          format: date
        used:
          type: number
    StorageValueHistoryData:
      type: object
      required:
        - price
        - idItem
        - operationDate
      properties:
        price:
          type: number
        idItem:
          type: integer
          format: int64
        operationDate:
          type: string
          format: date

    ProductPriceHistoryData:
      type: object
      required:
        - price
        - operationDate
      properties:
        price:
          type: number
        operationDate:
          type: string
          format: date

    PriceCategoryData:
      type: object
      required:
        - price
        - operationDate
      properties:
        idCategory:
          type: integer
          format: int64
        categoryName:
          type: string
        value:
          type: number

    PurchasesData:
      type: object
      required:
        - insertDate
        - productName
        - items
        - price
        - priceSum
        - idStorage
      properties:
        insertDate:
          type: string
          format: date
        productName:
          type: string
        items:
          type: integer
          format: int32
        price:
          type: number
        priceSum:
          type: number
        idStorage:
          type: integer
          format: int64
    StorageReportDataRow:
      type: object
      required:
        - idProduct
        - idCategory
        - productName
        - validList
      properties:
        productName:
          type: string
        idProduct:
          type: integer
          format: int64
        idCategory:
          type: integer
          format: int64
        validList:
          type: array
          items:
            $ref: '#/components/schemas/ProductValid'
    ProductValid:
      type: object
      required:
        - validDate
        - count
      properties:
        validDate:
          type: string
          format: date
        count:
          type: integer
          format: int32